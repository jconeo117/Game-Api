// <auto-generated />
using System;
using DungeonCrawlerAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DungeonCrawlerAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250829234058_ESmodel&UpdateMCharacter")]
    partial class ESmodelUpdateMCharacter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DungeonCrawlerAPI.Models.ItemShop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Owner_Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Item_Id");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("Stock");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("Items_Shop");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MCharacter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("BaseStatsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<int>("EXP")
                        .HasColumnType("integer")
                        .HasColumnName("Experience");

                    b.Property<int>("Gold")
                        .HasColumnType("integer")
                        .HasColumnName("Gold");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("Level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Character");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MDungeon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer")
                        .HasColumnName("Difficulty");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Dungeon_Name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MDungeonRun", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Character_Id");

                    b.Property<int>("CompletionTime")
                        .HasColumnType("integer")
                        .HasColumnName("Completion_Time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<string>("DungeonId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Dungeon_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean")
                        .HasColumnName("Success");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("DungeonId");

                    b.ToTable("DungeonRuns");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MEquipmentSlot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<string>("CharacterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<int>("SlotType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("CharacterId", "SlotType")
                        .IsUnique();

                    b.ToTable("EquipmentSlots");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MInventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<int>("NumSlots")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MItems", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("InventaryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Inventario");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer")
                        .HasColumnName("Item_Type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<string>("StatsJson")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("InventaryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Created_By");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailVerify")
                        .HasColumnType("boolean")
                        .HasColumnName("Email_Verified");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Last_Login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("Refresh_Token");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.Property<DateTime?>("TokenExpiresTimen")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Expires_In");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_At");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("Updated_By");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.ItemShop", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MCharacter", "Character")
                        .WithMany("ItemShop")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonCrawlerAPI.Models.MItems", "Item")
                        .WithMany("ShoppingListing")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MCharacter", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MUser", "User")
                        .WithOne("Character")
                        .HasForeignKey("DungeonCrawlerAPI.Models.MCharacter", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MDungeonRun", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MCharacter", "Character")
                        .WithMany("DungeonRuns")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonCrawlerAPI.Models.MDungeon", "Dungeon")
                        .WithMany("Runs")
                        .HasForeignKey("DungeonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Dungeon");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MEquipmentSlot", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MCharacter", "Character")
                        .WithMany("EquipmentSlots")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DungeonCrawlerAPI.Models.MItems", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MInventory", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MCharacter", "Player")
                        .WithOne("Inventory")
                        .HasForeignKey("DungeonCrawlerAPI.Models.MInventory", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MItems", b =>
                {
                    b.HasOne("DungeonCrawlerAPI.Models.MInventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MCharacter", b =>
                {
                    b.Navigation("DungeonRuns");

                    b.Navigation("EquipmentSlots");

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("ItemShop");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MDungeon", b =>
                {
                    b.Navigation("Runs");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MInventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MItems", b =>
                {
                    b.Navigation("ShoppingListing");
                });

            modelBuilder.Entity("DungeonCrawlerAPI.Models.MUser", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
